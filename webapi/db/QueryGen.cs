using System.Reflection;
using webapi.db.attributes;

namespace webapi.db
{

	public class QueryGen<T>
	{
		private static string TableName => typeof(T).GetCustomAttribute<TableNameAttribute>()?.TableName ?? typeof(T).Name;

		public static IEnumerable<string> Fields =>
									from field
									in typeof(T).GetFields()
									select field.Name;

		public static IEnumerable<string> InsertFields =>
									from field
									in typeof(T).GetFields()
									where field.GetCustomAttribute<IdentityFieldAttribute>() is null &&
										  field.GetCustomAttribute<AutoGeneratedAttribute>() is null
									select field.Name;


		public static string PrimaryKey => (
				from field
				in typeof(T).GetFields()
				where field.GetCustomAttribute<PrimaryKeyAttribute>() is not null
				select field.Name).FirstOrDefault() ?? $"{TableName}Id";

		public static string SelectAll =>
					$@"select {string.Join(", ", Fields)} " +
					$"from {TableName}";

		public static string SelectById =>
				 	$@"select {string.Join(", ", Fields)} " +
					$"from {TableName} " +
					$"where {PrimaryKey}=@KeyValue";

		public static string Insert =>
					$"insert into {TableName} ({string.Join(", ", InsertFields)}) " +
					$"values ({string.Join(", ", from field in InsertFields select $"@{field}")}); " +
					"select LAST_INSERT_ID();";

		public static string Update =>
					$"update {TableName} " +
					$"set {string.Join(", ", from field in Fields select $"{field} = @{field}")} " +
					$"where {PrimaryKey} = @KeyValue";

		public static string Delete =>
					$"delete from {TableName} " +
					$"where {PrimaryKey} = @KeyValue";

		public static object CastKey(object value)
		{
			var pkField = typeof(T).GetFields()
								  .FirstOrDefault(f => f.GetCustomAttribute<PrimaryKeyAttribute>() != null);

			Type pkType = pkField?.FieldType ?? typeof(string);

			try
			{
				return pkType switch
				{
					Type t when t == typeof(int) => int.Parse(value.ToString() ?? ""),
					Type t when t == typeof(ulong) => long.Parse(value.ToString() ?? ""),
					_ => value
				};
			}
			catch (FormatException)
			{
				return value;
			}
		}
	}

}